// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using My_Resturant.Context;

#nullable disable

namespace My_Resturant.Migrations
{
    [DbContext(typeof(RestDbContext))]
    [Migration("20250713153037_AddForienkeyOrderLookupItemsRating")]
    partial class AddForienkeyOrderLookupItemsRating
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("My_Resturant.Entities.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("modificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("name")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("name")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("My_Resturant.Entities.Ingrediant", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("modificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("unit")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("unit");

                    b.ToTable("Ingrediants", (string)null);
                });

            modelBuilder.Entity("My_Resturant.Entities.IngrediantItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ingrediantId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("modificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("ingrediantId");

                    b.HasIndex("itemId");

                    b.ToTable("IngrediantItem", (string)null);
                });

            modelBuilder.Entity("My_Resturant.Entities.Item", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("category")
                        .HasColumnType("int");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("ingrediants")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("modificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<int>("stock")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("category");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("My_Resturant.Entities.LookupItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("lookupTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("modificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("lookupTypeID");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("LoolupItems", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 1,
                            name = "Fast Food"
                        },
                        new
                        {
                            id = 2,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 1,
                            name = "Italian"
                        },
                        new
                        {
                            id = 3,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 1,
                            name = "Healty"
                        },
                        new
                        {
                            id = 4,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 2,
                            name = "New"
                        },
                        new
                        {
                            id = 5,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 2,
                            name = "Confirmed"
                        },
                        new
                        {
                            id = 6,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 2,
                            name = "Cancelled"
                        },
                        new
                        {
                            id = 7,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 2,
                            name = "Delivered"
                        },
                        new
                        {
                            id = 8,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 3,
                            name = "Gm"
                        },
                        new
                        {
                            id = 9,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 3,
                            name = "Ml"
                        },
                        new
                        {
                            id = 10,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 3,
                            name = "Pieces"
                        },
                        new
                        {
                            id = 11,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 4,
                            name = "Admin"
                        },
                        new
                        {
                            id = 12,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 4,
                            name = "customer"
                        },
                        new
                        {
                            id = 13,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 5,
                            name = "Very bad"
                        },
                        new
                        {
                            id = 14,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 5,
                            name = "Bad"
                        },
                        new
                        {
                            id = 15,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 5,
                            name = "Good"
                        },
                        new
                        {
                            id = 16,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 5,
                            name = "Very Good"
                        },
                        new
                        {
                            id = 17,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            lookupTypeID = 5,
                            name = "Exillent"
                        });
                });

            modelBuilder.Entity("My_Resturant.Entities.LookupType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("modificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("LookupTypes", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            name = "CategoryName"
                        },
                        new
                        {
                            id = 2,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            name = "OrderStatus"
                        },
                        new
                        {
                            id = 3,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            name = "Unit"
                        },
                        new
                        {
                            id = 4,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            name = "Role"
                        },
                        new
                        {
                            id = 5,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            name = "Rateing"
                        });
                });

            modelBuilder.Entity("My_Resturant.Entities.Meal", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("category")
                        .HasColumnType("int");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("modificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<int>("stock")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("category");

                    b.ToTable("Meals", (string)null);
                });

            modelBuilder.Entity("My_Resturant.Entities.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("costumerId")
                        .HasColumnType("int");

                    b.Property<string>("costumerNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("deliveryAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("modificationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("netPrice")
                        .HasColumnType("float");

                    b.Property<int>("orderStatus")
                        .HasColumnType("int");

                    b.Property<int?>("rating")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("costumerId");

                    b.HasIndex("orderStatus");

                    b.HasIndex("rating");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("My_Resturant.Entities.OrderItemDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("modificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("itemId");

                    b.HasIndex("orderId");

                    b.ToTable("OrderItemDetails", (string)null);
                });

            modelBuilder.Entity("My_Resturant.Entities.OrderMealDetiales", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("modificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("MealId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderMealDetails", (string)null);
                });

            modelBuilder.Entity("My_Resturant.Entities.Person", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("modificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("12");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("password")
                        .IsUnique();

                    b.HasIndex("role");

                    b.ToTable("People", null, t =>
                        {
                            t.HasCheckConstraint("CH_password_Length", "LEN(password) >= 5");
                        });

                    b.HasData(
                        new
                        {
                            id = 1,
                            creationDate = new DateTime(2025, 3, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            email = "6D7C381F8597F4DFB9D47ABBEE793CCC5DBAFCD5ECB7B4A02C436C2AB27D57B0DAD78FE14BBC0AAC76C1CBB124728E51",
                            firstName = "Omar",
                            isActive = true,
                            lastName = "Suliman",
                            password = "A48646AF11C3BC78393F42E2247557917DCC5BD3062E2A3F63C02AC26056AF3C493DFA67FD585EFC59D0D13FF3DD95DD",
                            phone = "079428423",
                            role = 11
                        });
                });

            modelBuilder.Entity("My_Resturant.Entities.mealDetials", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("itemID")
                        .HasColumnType("int");

                    b.Property<int>("mealID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("modificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("itemID");

                    b.HasIndex("mealID");

                    b.ToTable("MealDetails", (string)null);
                });

            modelBuilder.Entity("My_Resturant.Entities.Category", b =>
                {
                    b.HasOne("My_Resturant.Entities.LookupItem", null)
                        .WithMany()
                        .HasForeignKey("name")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("My_Resturant.Entities.Ingrediant", b =>
                {
                    b.HasOne("My_Resturant.Entities.LookupItem", null)
                        .WithMany()
                        .HasForeignKey("unit")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("My_Resturant.Entities.IngrediantItem", b =>
                {
                    b.HasOne("My_Resturant.Entities.Ingrediant", null)
                        .WithMany()
                        .HasForeignKey("ingrediantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Resturant.Entities.Item", null)
                        .WithMany()
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("My_Resturant.Entities.Item", b =>
                {
                    b.HasOne("My_Resturant.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("category")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("My_Resturant.Entities.LookupItem", b =>
                {
                    b.HasOne("My_Resturant.Entities.LookupType", null)
                        .WithMany()
                        .HasForeignKey("lookupTypeID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("My_Resturant.Entities.Meal", b =>
                {
                    b.HasOne("My_Resturant.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("category")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("My_Resturant.Entities.Order", b =>
                {
                    b.HasOne("My_Resturant.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("costumerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("My_Resturant.Entities.LookupItem", null)
                        .WithMany()
                        .HasForeignKey("orderStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("My_Resturant.Entities.LookupItem", null)
                        .WithMany()
                        .HasForeignKey("rating")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("My_Resturant.Entities.OrderItemDetails", b =>
                {
                    b.HasOne("My_Resturant.Entities.Item", null)
                        .WithMany()
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Resturant.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("My_Resturant.Entities.OrderMealDetiales", b =>
                {
                    b.HasOne("My_Resturant.Entities.Meal", null)
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Resturant.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("My_Resturant.Entities.Person", b =>
                {
                    b.HasOne("My_Resturant.Entities.LookupItem", null)
                        .WithMany()
                        .HasForeignKey("role")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("My_Resturant.Entities.mealDetials", b =>
                {
                    b.HasOne("My_Resturant.Entities.Item", null)
                        .WithMany()
                        .HasForeignKey("itemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Resturant.Entities.Meal", null)
                        .WithMany()
                        .HasForeignKey("mealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
